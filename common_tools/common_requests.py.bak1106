#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
@author: Alex
@date: 2020/04/23 08:46:25
@file: common_requests.py
@usage: 公共的requests，用于下载页面
"""
import sys
reload(sys)
sys.setdefaultencoding('utf-8')
sys.path.append('/home/work/data/crawler3/crawler3_py/develop_jobs')

import random

import requests

from common_tools import config
from common_tools import exception
from common_tools import tools


PROXY_METHOD = {
    'zhima': tools.get_zhima_proxy,
    'abuyun': tools.get_abuyun_proxy,
    'dobel': tools.get_dobel_proxy,
}


class CommonRequests(object):
    def __init__(self, max_try_times=0, timeout=0, headers=None, proxy_type=None, is_need_session=False):
        """
        初始化
        :param max_try_times: 最大尝试次数， 默认3次
        :param timeout: 超时时间，默认30秒
        :param headers: 请求头，默认只有User-Agent
        :param proxy_type: IP代理方式，zhima\abuyun等
        :param is_need_session: 是否使用session方式请求， True or False
        """
        self.max_try_times = max_try_times or config.MAX_TRY_TIMES
        self.timeout = timeout or config.DEFAULT_TIMEOUT
        self.headers = headers or config.DEFAULT_HEADERS

        self.proxy_type = proxy_type
        if proxy_type == 'random':
            proxy_type = random.choice(PROXY_METHOD.keys())
        if proxy_type and proxy_type not in PROXY_METHOD:
            raise ValueError('proxy type value error.')
        self.proxy = None
        self.get_proxy = PROXY_METHOD.get(proxy_type, None)
        self.temp_proxy_type = proxy_type  # 用于判断本次类型不等于上次类型时，保证self.proxy被重置

        self.is_need_session = is_need_session
        self.session = None
        if self.is_need_session is True:
            self.session = requests.Session()

    @staticmethod
    def _check_parameters(**kwargs):
        """
        检查 kwargs 参数
        :param kwargs:
        :return:
        """
        parameters = {}
        for key, val in kwargs.iteritems():
            if key not in config.ALLOW_PARAMETER:
                raise KeyError('parameter {} is not allowed.'.format(key))
            if val is None:
                continue
            if not isinstance(val, config.ALLOW_PARAMETER.get(key)):
                if isinstance(config.ALLOW_PARAMETER.get(key), (tuple, list)):
                    text = ' or '.join(['{}'.format(t) for t in config.ALLOW_PARAMETER.get(key)])
                else:
                    text = ''.format(config.ALLOW_PARAMETER.get(key))
                raise TypeError('parameter {} must be {}.'.format(key, text))
            parameters[key] = val
        # sleep_time 的特殊判断
        sleep_time = kwargs.get('sleep_time', None)
        if sleep_time is not None:
            if not (len(sleep_time) == 2 and isinstance(sleep_time[0], int) and isinstance(sleep_time[1], int)):
                raise ValueError('sleep time must be a list or tuple, contains two int element.')
            elif sleep_time[0] >= sleep_time[1]:
                raise ValueError('first element must be less than the second in sleep time.')
        # proxy_type 的特殊判断
        proxy_type = kwargs.get('proxy_type', None)
        if proxy_type is not None:
            if proxy_type not in PROXY_METHOD and proxy_type != 'random':
                raise ValueError('proxy type value error.')
        return parameters

    def init_session(self, url, method='get', **kwargs):
        """
        初始化session，使其拥有某些状态
        :param url: 请求url
        :param method: 请求方式
        :param kwargs: 参数：headers\timeout\allow_redirects\stream\data\json_\cookies\proxies\verify\cert\max_try_times\sleep_time
        :return:
        """
        self.is_need_session = True
        self.session = requests.Session()
        self.retry_download_page(url=url, method=method, **kwargs)

    def retry_download_page(self, url, method='get', **kwargs):
        """
        下载页面，失败后尝试，最多max_try_times次
        :param url: 请求url
        :param method: 请求方式
        :param kwargs: 参数：headers\timeout\allow_redirects\stream\data\json_\cookies\proxies\verify\cert\max_try_times\sleep_time
        :return:
        """
        if method.upper() not in config.ALLOW_METHODS:
            raise exception.MethodError('{} is not allowed.'.format(method))

        parameters = self._check_parameters(**kwargs)

        if self.is_need_session is True and self.session is None:
            self.session = requests.Session()

        if 'timeout' not in parameters:
            parameters['timeout'] = getattr(self, 'timeout')
        if 'headers'not in parameters:
            parameters['headers'] = getattr(self, 'headers')

        max_try_times = getattr(self, 'max_try_times')
        if 'max_try_times' in parameters:
            max_try_times = parameters.pop('max_try_times')

        sleep_time = None
        if 'sleep_time' in parameters:
            sleep_time = parameters.pop('sleep_time')

        proxy_type = None
        if 'proxy_type' in parameters:
            proxy_type = parameters.pop('proxy_type')

        # 用来还原至初始化时的代理
        ori_get_proxy = self.get_proxy

        # 当用户传了proxy_type时，若为random，随机取
        # 当用户没有传proxy_type时，使用初始化的self.proxy_type，若为random，随机取
        if proxy_type:
            if proxy_type == 'random':
                proxy_type = random.choice(PROXY_METHOD.keys())
        else:
            if self.proxy_type == 'random':
                proxy_type = random.choice(PROXY_METHOD.keys())
            else:
                proxy_type = self.proxy_type
        # 用于判断本次类型不等于上次类型时，保证self.proxy被重置，相等时不必再次获取代理，可以减少对其接口的访问次数，例如芝麻代理池
        if self.temp_proxy_type != proxy_type:
            self.proxy = None
        self.temp_proxy_type = proxy_type
        self.get_proxy = PROXY_METHOD.get(proxy_type, None)

        if self.get_proxy is not None and self.proxy is None:
            self.proxy = self.get_proxy()
        parameters['proxies'] = self.proxy

        # 当self.proxy_type为random时，不需要还原
        if self.proxy_type != 'random':
            self.get_proxy = ori_get_proxy

        try_times = 1
        while try_times <= max_try_times:
            err_msg = ''
            if try_times == 3:
                proxy_type = 'zhima'
                parameters['proxies'] = PROXY_METHOD.get(proxy_type)()
            if proxy_type == 'zhima' and 'https' in parameters['proxies']:
                parameters['proxies'].pop('https')
            try:
                if self.is_need_session is True:
                    response = self.session.request(method=method, url=url, **parameters)
                else:
                    response = requests.request(method=method, url=url, **parameters)
                if proxy_type == 'zhima' and ('"code":113' in response.text or '"code":117' in response.text):
                    # 添加白名单
                    tools.add_zhima_white(response=response)
                    continue
                elif response.status_code / 100 == 2:
                    return response
                elif response.status_code in (403, 503):
                    if self.get_proxy is not None:
                        if proxy_type == 'zhima' or try_times == 3:
                            # 当代理是芝麻时，需要将failed_times加一
                            tools.put_zhima_proxy(proxy=parameters['proxies'], is_failed=True)
                        parameters['proxies'] = self._switch_proxy(proxy_type=proxy_type)

                if try_times >= max_try_times:
                    err_msg = '{}'.format('http code: {}'.format(response.status_code))
            except requests.exceptions.SSLError as ex:
                if 'EOFError' in '{}'.format(ex):
                    if proxy_type == 'zhima' and 'https' in parameters['proxies']:
                        parameters['proxies'].pop('https')
                else:
                    parameters['verify'] = False
                err_msg = '{}'.format(ex)
            except requests.RequestException as ex:
                if proxy_type == 'zhima' or try_times == 3:
                    # 当代理是芝麻时，需要将failed_times加一
                    tools.put_zhima_proxy(proxy=parameters['proxies'], is_failed=True)

                if self.get_proxy is not None:
                    parameters['proxies'] = self._switch_proxy(proxy_type=proxy_type)
                err_msg = '{}'.format(ex)
            finally:
                if sleep_time:
                    tools.random_sleep_time(*sleep_time)
            if try_times >= max_try_times:
                raise exception.DownloadError('requests download page error, {}'.format(err_msg))
            try_times += 1
        return None

    def _switch_proxy(self, proxy_type):
        """
        切换代理
        :param: proxy_type
        :return:
        """
        self.proxy = self.get_proxy()
        if proxy_type in ['abuyun', 'dobel']:
            # 阿布云、多贝云等隧道需要手动切换IP
            tools.switch_ip(proxy=self.proxy)
        return self.proxy


if __name__ == '__main__':
    CommonRequests().retry_download_page(url='', sleep_time=(0, 1))

