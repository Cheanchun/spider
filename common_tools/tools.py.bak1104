#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
@author: Alex
@date: 2020/04/23 08:46:25
@file: common_requests.py
@usage: 工具方法，随机睡眠, 去除特殊字符等
"""
import sys
reload(sys)
sys.setdefaultencoding('utf-8')
sys.path.append('/home/work/data/crawler3/crawler3_py/develop_jobs')

import chardet
import hashlib
import json
import random
import re
import six
import time

import requests

from common_tools import config, exception


DATE_PATTERN = re.compile(ur'(\d{4}[-/年]\d{1,2}[-/月]\d{1,2}日?)')
TIME_PATTERN = re.compile(ur'(\d{1,2}[时|:]\d{1,2}[分|:]?(\d{1,2}秒?)?)')
SECOND_PATTERN = re.compile(r'\d{1,2}:\d{1,2}:\d{1,2}')
MINUTE_PATTERN = re.compile(r'\d{1,2}:\d{1,2}')


def random_sleep_time(start=1, stop=5):
    """
    随机睡眠
    :param start: 最少时间，默认1
    :param stop: 最大时间，默认5
    :return:
    """
    if not (isinstance(start, int) and isinstance(stop, int)):
        raise TypeError('start or stop value must be a integer.')
    if start > stop:
        raise ValueError('start value must be less than stop value.')
    # assert isinstance(start, int), 'start must be a integer.'
    # assert isinstance(stop, int), 'stop must be a integer.'
    # assert start <= stop, 'start value must be less than stop value.'

    time.sleep(random.randint(start, stop))


def make_md5(text):
    """
    对字符串进行md5加密
    :param text:
    :return:
    """
    md5_text = hashlib.md5(text.encode('utf-8')).hexdigest()
    return md5_text


def make_sha256(text):
    """
    对字符串进行sha256加密
    :param text:
    :return:
    """
    sha256_text = hashlib.sha256(text.encode('utf-8')).hexdigest()
    return sha256_text


def replace_escape_chars(text, which_ones=('\n', '\t', '\r',u'\u3000',u'\xa0','\v','&nbsp;'), replace_by=u'', encoding=None):
    """
    #去除\n,\t,\r等特殊字符
    """
    def to_unicode(text, encoding=None, errors='strict'):
        if isinstance(text, six.text_type):
            return text
        if not isinstance(text, (bytes, six.text_type)):
            raise TypeError('to_unicode must receive a bytes, str or unicode '
                            'object, got %s' % type(text).__name__)
        if encoding is None:
            encoding = 'utf-8'
        return text.decode(encoding, errors)
        
    text = to_unicode(text, encoding)
    for ec in which_ones:
        text = text.replace(ec, replace_by)
    return text


def get_zhima_proxy():
    """
    获取芝麻代理
    :return:
    """
    try:
        res = requests.get(url=config.PROXY_GET_URL).json()
        if res.get('code') == 0:
            return res.pop('proxies')
        else:
            raise exception.GetProxyError('proxy pool error, please check')
    except Exception as ex:
        raise exception.GetProxyError('get zhima proxy error, {}'.format(ex))


def put_zhima_proxy(proxy, is_failed=False):
    """
    回收芝麻代理, 将failed_times加一
    :param proxy:
    :param is_failed:
    :return:
    """
    try:
        data = {
            'proxies': proxy,
            'is_failed': is_failed
        }
        res = requests.post(url=config.PROXY_PUT_URL, json=data).json()
        if res.get('code') != 0:
            raise exception.PutProxyError('proxy pool error, please check')
    except Exception as ex:
        raise exception.PutProxyError('put zhima proxy error, {}'.format(ex))


def get_abuyun_proxy():
    """
    设置阿布云代理
    :return:
    """
    proxy_meta = "http://%(user)s:%(pass)s@%(host)s:%(port)s" % {
        "host": config.ABUYUN_PROXY.get('host'),
        "port": config.ABUYUN_PROXY.get('port'),
        "user": config.ABUYUN_PROXY.get('username'),
        "pass": config.ABUYUN_PROXY.get('password'),
    }
    proxies = {
        "http": proxy_meta,
        "https": proxy_meta,
    }
    return proxies


def get_dobel_proxy():
    """
    设置多贝云代理
    :return:
    """
    proxy_meta = "http://%(user)s:%(pass)s@%(host)s:%(port)s" % {
        "host": config.DOBEL_PROXY.get('host'),
        "port": config.DOBEL_PROXY.get('port'),
        "user": config.DOBEL_PROXY.get('username'),
        "pass": config.DOBEL_PROXY.get('password'),
    }
    proxies = {
        "http": proxy_meta,
        "https": proxy_meta,
    }
    return proxies


def switch_ip(proxy):
    """
    隧道代理，手动切换IP
    :param proxy:
    :return:
    """
    if not proxy:
        raise exception.GetProxyError('switch ip error, proxy is wrong')

    proxy_str = json.dumps(proxy)
    if config.ABUYUN_PROXY.get('host') in proxy_str:
        switch_url = config.ABUYUN_SWITCH_IP
    elif config.DOBEL_PROXY.get('host') in proxy_str:
        switch_url = config.DOBEL_SWITCH_IP
    else:
        raise ValueError('switch ip error, proxy value error')
    try:
        requests.get(switch_url, proxies=proxy, headers=config.DEFAULT_HEADERS)
    except requests.RequestException as ex:
        raise exception.GetProxyError('requests switch ip error, {}'.format(ex))


def coding(response):
    """
    设置编码
    :param response:
    :return:
    """
    if not isinstance(response, requests.Response):
        raise ValueError('type of response is wrong, must be <requests.Response>.')

    if config.CHARTSET_RE.findall(response.text):
        response.encoding = config.CHARTSET_RE.findall(response.text)[0]
    elif config.PRAGMA_RE.findall(response.text):
        response.encoding = config.PRAGMA_RE.findall(response.text)[0]
    else:
        temp = chardet.detect(response.content)
        response.encoding = temp['encoding']
    return response


def format_time(time_str):
    time_str = transform_time(time_str=time_str)
    return clean_time(time_str=time_str)


def transform_time(time_str):
    if u'小时' in time_str:
        add_hour = re.findall(u'(.*?)小时', time_str)
        if add_hour:
            add_hour = add_hour[0]
        else:
            add_hour = '0'
        year = time.strftime('%Y')
        month = time.strftime('%m')
        day = int(time.strftime('%d'))
        hour = int(time.strftime('%H')) - int(add_hour)
        if hour < 0:
            day = day - 1
            hour = 24 + hour
        if hour < 10:
            hour = '0{}'.format(hour)
        minute = time.strftime('%M')
        time_str = u'{}-{}-{} {}:{}'.format(year, month, day, hour, minute)
    elif u'分钟' in time_str:
        add_minute = re.findall(u'(.*?)分钟', time_str)
        if add_minute:
            add_minute = add_minute[0]
        else:
            add_minute = '0'
        year = time.strftime('%Y')
        month = time.strftime('%m')
        day = time.strftime('%d')
        hour = int(time.strftime('%H'))
        minute = int(time.strftime('%M')) - int(add_minute)
        if minute < 0:
            hour = hour - 1
            minute = 60 + minute
        if minute < 10:
            minute = '0{}'.format(minute)
        if hour < 10:
            hour = '0{}'.format(hour)
        time_str = u'{}-{}-{} {}:{}'.format(year, month, day, hour, minute)
    return time_str


def clean_time(time_str):
    date_temp = re.findall(DATE_PATTERN, time_str) or ['']
    time_temp = re.findall(TIME_PATTERN, time_str) or [('',)]

    date_str = date_temp[0]
    time_str = time_temp[0][0]

    date_str = date_str.replace(u'年', '-').replace(u'月', '-').replace(u'日', '').replace(r'/', '-')
    time_str = time_str.replace(u'时', ':').replace(u'分', ':').replace(u'秒', '')
    if date_str.endswith('-'):
        date_str = date_str[:-1]
    if time_str.endswith(':'):
        time_str = time_str[:-1]
    if not re.findall(SECOND_PATTERN, time_str):
        temp = re.findall(MINUTE_PATTERN, time_str)
        minute_str = temp[0] if temp else '00:00'
        time_str = '{}:{}'.format(minute_str, '00')

    return '{} {}'.format(date_str, time_str).strip() if date_str else ''


if __name__ == '__main__':
    random_sleep_time(5, 2)

